{"version":3,"sources":["components/Button.js","components/Message.js","components/Channel.js","components/PopUp.js","components/UserList.js","App.js","reportWebVitals.js","index.js"],"names":["Button","onClick","text","formatDate","date","formattedDate","formatRelative","Date","charAt","toUpperCase","slice","Message","createdAt","nickname","photoURL","className","src","alt","width","height","seconds","Channel","user","useState","messages","setMessages","newMessage","setNewMessage","db","firebase","firestore","uid","useEffect","collection","orderBy","limit","onSnapshot","querySnapshot","data","docs","map","doc","id","handleOnSubmit","e","a","preventDefault","get","personFrom","blocked","console","log","add","FieldValue","serverTimestamp","includes","block","updateDoc","message","messageClick","onSubmit","type","value","onChange","target","placeholder","disable","toString","PopUp","stateChanger","newNickname","setNewNickname","update","UserList","users","setUsers","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","auth","App","initializing","setInitializing","pop","setPop","currentUser","setUser","onAuthStateChanged","signInGoogle","provider","GoogleAuthProvider","useDeviceLanguage","signInWithPopup","res","user2","snapshot","documentIds","setDoc","signOut","error","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d77e3da5.chunk.js","sourcesContent":["const Button = ({ onClick = null, text = null}) => {\r\n    return (\r\n        <div>\r\n            <button onClick = {onClick}>{text}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import { formatRelative } from 'date-fns';\r\n\r\nconst formatDate = date => {\r\n    let formattedDate = '';\r\n    if (date) {\r\n        // Convert the date to words relative to the current date\r\n        formattedDate = formatRelative(date, new Date());\r\n        // Capitalize first letter \r\n        formattedDate = formattedDate.charAt(0).toUpperCase() + formattedDate.slice(1);\r\n    }\r\n    return formattedDate;\r\n}\r\n\r\nconst Message = ({ createdAt = null, text = '', nickname = '', photoURL = '' }) => {\r\n\r\n    if (!text) return null;\r\n\r\n    return (\r\n        <div className=\"singleMessage\">\r\n            {photoURL && (<div className=\"one\"><img src={photoURL} alt=\"Avatar\" className=\"userPic\" width={40} height={40}/></div>)}\r\n            {(nickname && createdAt?.seconds) && \r\n            (<div className=\"two\"><span className=\"msgName\">{nickname}</span><span className=\"msgTime\">{formatDate(new Date(createdAt.seconds * 1000))}</span></div>)}\r\n            <div className=\"three\"><p>{text}</p></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message\r\n","import firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\nimport { useState, useEffect } from 'react'\r\nimport { doc, updateDoc } from 'firebase/firestore';\r\nimport Message from './Message'\r\n\r\nconst Channel = ({ user = null}) => {\r\n    const [messages, setMessages] = useState([]);\r\n    const [newMessage, setNewMessage] = useState('');\r\n    const db = firebase.firestore();\r\n\r\n    //const {uid, displayName, photoURL} = user;\r\n    const {uid, photoURL} = user;\r\n\r\n    useEffect(() => {\r\n        if (db) {\r\n            const unsubscribe = db.collection('messages').orderBy('createdAt').limit(100).onSnapshot(querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => ({\r\n                    ...doc.data(),\r\n                    id: doc.id,\r\n                }));\r\n                setMessages(data);\r\n            })\r\n            return unsubscribe;\r\n        }\r\n    }, [db]);\r\n\r\n    const handleOnChange = e => {\r\n        setNewMessage(e.target.value);\r\n    };\r\n\r\n    const handleOnSubmit = async e => {\r\n        e.preventDefault();\r\n\r\n        const personFrom = await db.collection('users').doc(uid).get();\r\n        const blocked = await personFrom.data().blocked;\r\n        const nickname = await personFrom.data().nickname;\r\n        console.log(\"blocked: \", blocked);\r\n        console.log(\"nickname: \", nickname);\r\n        if (db) {\r\n            if (!blocked){\r\n                db.collection('messages').add({\r\n                    text: newMessage,\r\n                    createdAt: firebase.firestore.FieldValue.serverTimestamp(),\r\n                    uid,\r\n                    nickname,\r\n                    photoURL\r\n                })\r\n            } else {\r\n                console.log(\"user is blocked so message didnt send\");\r\n            }\r\n            if (newMessage.includes(\"corn\")){\r\n                block();\r\n            }\r\n        }\r\n\r\n        // Message field empties after submitting\r\n        setNewMessage('');\r\n    }\r\n\r\n    const block = async () => {\r\n        console.log(\"blocked lmao\");\r\n        await updateDoc(doc(db, 'users', uid), {\r\n            blocked: true\r\n        })\r\n    }\r\n\r\n    // Clicking on a message\r\n    const messageClick = (message) =>{\r\n        console.log(`You clicked on a message: '${message.text}'\\n...but this feature isn't implemented yet :(`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"chat\">\r\n                <h2>Welcome!</h2>\r\n                <p id=\"welcomeText\">This is the start of the channel.</p>\r\n                <ul>\r\n                    {\r\n                        messages.map(message => (\r\n                            <li key={message.id} onClick={() => messageClick(message)}><Message {...message}/></li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </div>\r\n            <div className=\"sendMessage\">\r\n            <form onSubmit={handleOnSubmit}>\r\n                <input type=\"text\" value={newMessage} onChange={handleOnChange} placeholder=\"Message\"/>\r\n                <input type=\"submit\" disable={(!newMessage).toString()} className=\"hideThis\"/>\r\n            </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Channel\r\n","import firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\nimport { useState } from 'react'\r\n\r\nconst PopUp = ({ user = null, stateChanger }) => {\r\n    const db = firebase.firestore();\r\n    const [newNickname, setNewNickname] = useState('');\r\n\r\n    const handleOnChange = e => {\r\n        setNewNickname(e.target.value);\r\n    };\r\n\r\n    const handleOnSubmit = e => {\r\n        e.preventDefault();\r\n        db.collection('users').doc(user.uid).update({\r\n            nickname: newNickname\r\n        });\r\n        stateChanger();\r\n    }\r\n\r\n    return (\r\n        <div className=\"modal\">\r\n            <div className=\"modal-content\">\r\n                <span className=\"close\" onClick={() => stateChanger()}>&times;</span>\r\n                <p>This is where the user will be able to modify their profile.</p>\r\n                <form onSubmit={handleOnSubmit}>\r\n                    <label>Change nickname</label>\r\n                    <input type=\"text\" value={newNickname} onChange={handleOnChange}></input>\r\n                    <button type=\"submit\">Update</button>\r\n                    <label>Change picture: coming soon</label>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PopUp\r\n","import firebase from 'firebase/compat/app';\r\nimport 'firebase/compat/auth';\r\nimport 'firebase/compat/firestore';\r\nimport { useState, useEffect } from 'react'\r\n\r\nconst UserList = () => {\r\n    const [users, setUsers] = useState([]);\r\n    const db = firebase.firestore();\r\n\r\n\r\n    useEffect(() => {\r\n        if (db) {\r\n            const unsubscribe = db.collection('users').onSnapshot(querySnapshot => {\r\n                const data = querySnapshot.docs.map(doc => ({\r\n                    ...doc.data(),\r\n                    id: doc.id,\r\n                }));\r\n                setUsers(data);\r\n                console.log(data);\r\n            })\r\n            return unsubscribe;\r\n        }\r\n    }, [db]);\r\n    \r\n\r\n    return (\r\n        <div className=\"userList\">\r\n        <h2>Users</h2>\r\n            {/* <ul>\r\n                {\r\n                    users.map(user => (\r\n                        <li key={user.id}><img src={user.photoURL} alt=\"Avatar\" className=\"userPic\" width={45} height={45}/>{user.nickname}</li>\r\n                    ))\r\n                }\r\n            </ul> */}\r\n            {\r\n                users.map(user=>(\r\n                    <div className=\"userListUser\" key={user.id}><img src={user.photoURL} alt=\"Avatar\" className=\"userPic\" width={40} height={40}/><span>{user.nickname}</span></div>\r\n                ))\r\n            }\r\n        </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default UserList\r\n","import firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport { doc, setDoc } from 'firebase/firestore';\nimport { useState, useEffect } from 'react'\nimport Button from './components/Button'\nimport Channel from './components/Channel'\nimport PopUp from './components/PopUp'\nimport UserList from './components/UserList'\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBKALmfA6So_nIi5lPTm279CAPWfN_TLMg\",\n  authDomain: \"corddisc-firetrack.firebaseapp.com\",\n  projectId: \"corddisc-firetrack\",\n  storageBucket: \"corddisc-firetrack.appspot.com\",\n  messagingSenderId: \"1070889245935\",\n  appId: \"1:1070889245935:web:77d63004606761222d4f1a\"\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\n\nconst App = () => {\n  // Initializing state so we don't render while connecting\n  const [initializing, setInitializing] = useState(true);\n  const [pop, setPop] = useState(false);\n  const [user, setUser] = useState(() => auth.currentUser);\n  const db = firebase.firestore();\n\n  // Monitor signed or signed out\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged(user => {\n      if (user) {\n        setUser(user); // if user is defined we set user state to current user\n      } else {\n        setUser(false);\n      }\n      if (initializing) {\n        setInitializing(false);\n      }\n    });\n\n    return unsubscribe;\n  }, [initializing]) // only fire when initializing is updated\n\n  // Sign in process\n  const signInGoogle = async () => {\n    // Retrieve Google provider object\n    const provider = new firebase.auth.GoogleAuthProvider();\n    // Set languageto the default browser preference\n    auth.useDeviceLanguage();\n    // Start sign in \n    try {\n      const res = await firebase.auth().signInWithPopup(provider)\n      const user2 = res.user;\n      console.log(user2);\n      \n      // Getting all user ids and checking if the current user is new\n      const snapshot = await firebase.firestore().collection('users').get()\n      const documentIds = snapshot.docs.map(doc => doc.id);\n\n      console.log(documentIds);\n\n      // If they are new, thens set up their data\n      if (!documentIds.includes(user2.uid)) {\n        await setDoc(doc(db, 'users', user2.uid), {\n          nickname: \"New user\",\n          photoURL: user2.photoURL,\n          blocked: false\n        })\n      }\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  // Sign out process\n  const signOut = async () => {\n    try {\n      auth.signOut();\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  //\n  return (\n    <div>\n      {\n        user ? (\n          <div className=\"container\">\n            <div className=\"placeholderdiv\">\n              <h1>placeholder text</h1>\n              <Channel user={user} />\n              <Button className=\"but\" onClick={() => setPop(!pop)} text=\"User\"></Button>\n              {pop && <PopUp user={user} stateChanger={setPop}></PopUp>}\n              <Button className=\"but\" onClick={signOut} text=\"Sign out\"></Button>\n            </div>\n            <UserList></UserList>\n          </div>\n        ) :\n          <div className=\"container2\">\n            <h1>Hey.</h1>\n            <h2>I'm making my own realtime chat application.</h2>\n            <Button onClick={signInGoogle} text=\"Sign in with Google\"></Button>\n          </div>\n      }\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}